import types
from .plyproto import parser as plyproto
from .entity import Entity, IntegerField, StringField, BooleanField
from .entity import Service, Method

class Loader(object):
    type_transform = {
        'int32': IntegerField,
        'int64': IntegerField,
        'uint32': IntegerField,
        'uint64': IntegerField,
        'sint32': IntegerField,
        'sint64': IntegerField,
        'bool': BooleanField,
        'string': StringField,
        'bytes': StringField,
    }

    def __init__(self):
        pass

    def load_file(self, fobj, name):
        return self.load(fobj.read(), name)

    def load(self, src, name):
        parser = plyproto.ProtobufAnalyzer()
        result = parser.parse_string(src)
        print(result)
        module = types.ModuleType(name, 'Generated by protoby on the fly')
        self.proto = result
        self.module = module
        # self._gen_enums()
        # self._gen_imports()
        self._gen()
        return self.module

    def _on_elem(self, elem):
        t = type(elem)
        method = '_on_{}'.format(t.__name__)
        print('Call', method)
        method = getattr(self, method)
        return method(elem)

    def _gen(self):
        for elem in self.proto.body:
            name, cls = self._on_elem(elem)
            print('Attr', name, cls)
            setattr(self.module, name, cls)

    def _on_MessageDefinition(self, define):
        attrs = {}
        m_name = define.name.value.pval
        print('MessageDefine', m_name)
        # print(define, attrs)
        for field in define.body:
            modifier = field.field_modifier and field.field_modifier.pval
            ftype = field.ftype.name.pval
            name = field.name.value.pval
            fid = field.fieldId.pval
            print(modifier, ftype, name)
            required = True if modifier not in ('optional', 'singular') else False
            repeated = modifier == 'repeated'
            field_obj = self.type_transform[ftype](required=required)
            attrs[name] = field_obj
        cls = type(m_name, (Entity,), attrs)
        print('MessageDefine', m_name, cls)
        return m_name, cls

    def _on_MethodDefinition(self, define):
        name = define.name.value.pval
        param = define.name2.value.pval
        ret = define.name3.value.pval
        param = getattr(self.module, param)
        ret = getattr(self.module, ret)
        print(name, param, ret)
        return name, Method(name, param, ret)

    def _on_ServiceDefinition(self, define):
        # TODO: make service
        name = define.name.value.pval
        service = Service(name)
        for _def in define.body:
            _name, prop = self._on_elem(_def)
            setattr(prop, 'service', service)
            setattr(service, _name, prop)
        return name, service


if __name__ == '__main__':
    define = '''
message Person {
  required string name = 1;
  required int32 id = 2;
  optional string email = 3;
}
message HelloRequest {
  optional string greeting = 1;
}

message HelloResponse {
  optional string reply = 1;
}

service HelloService {
  rpc SayHello(HelloRequest) returns(HelloResponse)
}
'''

    m = Loader().load(define, 'test')
    print(m)
